{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"This guide will help you to create your first Flutter application for Android in IntelliJ IDEA IDE. You will learn how to: install the Flutter and Dart plugins for IntelliJ IDEA create a simple Flutter application and run it on Android device use different Flutter pulgin tools to speed up and ease the development process What is Flutter? Flutter is a mobile UI framework for creating native applications on Android and iOS. Flutter uses Dart as a programming language. What will you need? To develop a Flutter application, you will need: IntelliJ IDEA IDE (Community or Ultimate), version 2017.1 or later Java and Android SDKs Flutter and Dart plugins","title":"Introduction"},{"location":"#what-is-flutter","text":"Flutter is a mobile UI framework for creating native applications on Android and iOS. Flutter uses Dart as a programming language.","title":"What is Flutter?"},{"location":"#what-will-you-need","text":"To develop a Flutter application, you will need: IntelliJ IDEA IDE (Community or Ultimate), version 2017.1 or later Java and Android SDKs Flutter and Dart plugins","title":"What will you need?"},{"location":"create_app/","text":"Create a Flutter Application We will create a simple Flutter application, which will randomly change its interface color on tapping a button. Step 1. Create a Flutter project To create a Flutter project, Run IntelliJ IDEA. In the welcome window, click Create New Project or select File > New > Project from the IDE main window. Select Flutter from the left pane of the opened window. The Flutter section is available only if the Flutter plugin has been installed for the IDE. Click Install SDK and select a folder to store the Flutter SDK files. Alternatively, you can install the SDK from the official Flutter website . In this case, you will need to specify the path to the Flutter SDK folder on this page. After the SDK is installed, click Next . Specify the project name. The project name should be in lower case and cannot contain spaces and any special character but underscores. On the same page, you may also change the project type, the path to your application and specify the organisation name if the project is going to be published. You may also select a programming language, which will be used in Android and iOS modules of the project. For our app, we will leave the default settings. Click Finish and wait until the project is created. Run the demo application that has been created by default in the lib/main.dart file. Try to use the hot reload function with the demo app. Delete all content of lib/main.dart , so we can add a code of our first app from scratch. Step 2. Import packages In our app, we will use Flutter material design widgets from the material library. To use the library, add the following string in main.dart : import 'package:flutter/material.dart'; We also need to import an external package random_color , which will be used for the random color generation. Find more useful packages on the Flutter Packages website . To import an external package, Open the pubsec.yaml file from the root folder of the project. Add the package and its version to the dependencies list: dependencies: flutter: sdk: flutter random_color: ^1.0.3 Pull the package into your project by clicking Packages Get from the Flutter Commands toolbar when the pubsec.yaml is open, or select Toos > Flutter > Packages Get from the main menu. Import the package in main.dart : import 'package:random_color/random_color.dart'; Step 3. Add a stateless widget We will add a subclass of StatelessWidget . Stateless widgets do not have any state that could be changed by user interactions. This class will be a root of our application. Type stless to add the StatelessWidget class structure from life templates . The following class structure will appear: class extends StatelessWidget { @override Widget build(BuildContext context) { return Container(); } } Add the name of the class: class RandomColorApp extends StatelessWidget { @override Widget build(BuildContext context) { return Container(); } } You can use the Reformat Code with dartfmt command of the code editor context menu to correct the formatting of your code, which may be skewed after pasting code snippets. Every widget provides the build() method, which returns lower level widgets. Our build() method will return the MaterialApp widget, which will serve as a container for material design widgets that we will add later: class RandomColorApp extends StatelessWidget { @override Widget build(BuildContext context) { return MaterialApp( title: 'Random Color App', ); } } Add the main() method before the RandomColorApp class code and after the import links: void main() => runApp(RandomColorApp()); Step 4. Add a stateful widget Unlike a stateless widget, every stateful widget has a state. We will create a subclass of the StatefulWidget class and its state\u2014sublass of the State class. Type stful to add the StatefulWidget class structure from life templates . The following class structure will appear: class extends StatefulWidget { @override _State createState() => _State(); } class _State extends State<> { @override Widget build(BuildContext context) { return Container(); } } Rename the created classes. To do this, just type the name of the StatefulWidget sublass ( RandomColorHomePage ), all related classes will be renamed automatically. class RandomColorHomePage extends StatefulWidget { @override _RandomColorHomePageState createState() => _RandomColorHomePageState(); } class _RandomColorHomePageState extends State<RandomColorHomePage> { @override Widget build(BuildContext context) { return Container(); } } Add the created RandomColorHomePage class as a child widget for the RandomColorApp class created in Step 3: class RandomColorApp extends StatelessWidget { @override Widget build(BuildContext context) { return MaterialApp( title: 'Random Color App', home: RandomColorHomePage() ); } } Declare the _currentColor variable, which will contain a current color value, and override the setState() method in the _RandomColorHomePageState class. This method will generate a random color using external package random_color imported in Step 2. class _RandomColorHomePageState extends State<RandomColorHomePage> { Color _currentColor = RandomColor().randomColor(); @override void setState(fn) { _currentColor = RandomColor().randomColor(); super.setState(fn); } @override Widget build(BuildContext context) { return Container(); } } In the build() method of the _RandomColorHomePageState class, replace the default Container widget with the Scaffold widget containing AppBar , Text in the center of the screen and FloatingActionButton : class _RandomColorHomePageState extends State<RandomColorHomePage> { (\u2026) @override Widget build(BuildContext context) { return Scaffold( appBar: AppBar( title: Text('Random Color'), ), body: Center( child: Text('Current color'), ), floatingActionButton: FloatingActionButton( onPressed: null, tooltip: 'Change color', child: Icon(Icons.colorize), ), ); } } Run the application, or reload it if it is running. The app will look this way: Step 5. Change the widgets state On tapping the floating button, our app will change the color of its widgets and display the name of the current color in the center of the screen. To generate the current color value every time the button is tapped, add the call of the setState() method as a value of the onPressed property of FloatingActionButton : floatingActionButton: FloatingActionButton( onPressed: () { setState(() {}); }, Set the value of the backgroundColor property for the Scaffold , AppBar and FloatingActionButton widgets (for Scaffold , set the color value with transparency): @override Widget build(BuildContext context) { return Scaffold( backgroundColor: _currentColor.withAlpha(150), appBar: AppBar( title: Text('Random Color'), backgroundColor: _currentColor, ), body: Center( child: Text('Current color'), ), floatingActionButton: FloatingActionButton( onPressed: null, tooltip: 'Change color', child: Icon(Icons.colorize), backgroundColor: _currentColor, ), ); } Add the current color name under the \"Current color\" text. To do this, you will need to add a second Text widget and wrap both Text widgets with the Column widget. You can use Flutter Outline to wrap a widget with column automatically. To do this, select a widget in the Flutter Outline window and run the Wrap with Column command from toolbar or context menu. Additionally, format text size and color, and center the text vertically by using the mainAxisAlignment property of the Column widget: body: Center( child: Column( mainAxisAlignment: MainAxisAlignment.center, children: <Widget>[ Text(('Current color'), style: TextStyle( fontSize: 20, color: Color.fromARGB(255, 255, 255, 255), )), Text( (getColorNameFromColor(_currentColor).getName), style: TextStyle( fontSize: 36, color: Color.fromARGB(255, 255, 255, 255), ), ) ], ), ), Reload the application. You will get the following result: Your app interface will have a random color. The widgets color will change on tapping the floating button. Source code You can review the code of the created app here: main.dart pubspec.yaml Tips Use the Reformat Code with dartfmt command of the code editor context menu to correct the formatting of your code. Use the Dart Analysis window to review the errors which may appear when editing the code. Use Flutter Outline to easily navigate through the widgets tree, change widgets hierarchy, edit widgets layout, etc. Use Flutter Inspector to explore the widgets hierarchy and debug possible layout issues. Find more information on useful Flutter plugin functions in the Flutter Plugin Tools section.","title":"Create a Flutter Application"},{"location":"create_app/#create-a-flutter-application","text":"We will create a simple Flutter application, which will randomly change its interface color on tapping a button.","title":"Create a Flutter Application"},{"location":"create_app/#step-1-create-a-flutter-project","text":"To create a Flutter project, Run IntelliJ IDEA. In the welcome window, click Create New Project or select File > New > Project from the IDE main window. Select Flutter from the left pane of the opened window. The Flutter section is available only if the Flutter plugin has been installed for the IDE. Click Install SDK and select a folder to store the Flutter SDK files. Alternatively, you can install the SDK from the official Flutter website . In this case, you will need to specify the path to the Flutter SDK folder on this page. After the SDK is installed, click Next . Specify the project name. The project name should be in lower case and cannot contain spaces and any special character but underscores. On the same page, you may also change the project type, the path to your application and specify the organisation name if the project is going to be published. You may also select a programming language, which will be used in Android and iOS modules of the project. For our app, we will leave the default settings. Click Finish and wait until the project is created. Run the demo application that has been created by default in the lib/main.dart file. Try to use the hot reload function with the demo app. Delete all content of lib/main.dart , so we can add a code of our first app from scratch.","title":"Step 1. Create a Flutter project"},{"location":"create_app/#step-2-import-packages","text":"In our app, we will use Flutter material design widgets from the material library. To use the library, add the following string in main.dart : import 'package:flutter/material.dart'; We also need to import an external package random_color , which will be used for the random color generation. Find more useful packages on the Flutter Packages website . To import an external package, Open the pubsec.yaml file from the root folder of the project. Add the package and its version to the dependencies list: dependencies: flutter: sdk: flutter random_color: ^1.0.3 Pull the package into your project by clicking Packages Get from the Flutter Commands toolbar when the pubsec.yaml is open, or select Toos > Flutter > Packages Get from the main menu. Import the package in main.dart : import 'package:random_color/random_color.dart';","title":"Step 2. Import packages"},{"location":"create_app/#step-3-add-a-stateless-widget","text":"We will add a subclass of StatelessWidget . Stateless widgets do not have any state that could be changed by user interactions. This class will be a root of our application. Type stless to add the StatelessWidget class structure from life templates . The following class structure will appear: class extends StatelessWidget { @override Widget build(BuildContext context) { return Container(); } } Add the name of the class: class RandomColorApp extends StatelessWidget { @override Widget build(BuildContext context) { return Container(); } } You can use the Reformat Code with dartfmt command of the code editor context menu to correct the formatting of your code, which may be skewed after pasting code snippets. Every widget provides the build() method, which returns lower level widgets. Our build() method will return the MaterialApp widget, which will serve as a container for material design widgets that we will add later: class RandomColorApp extends StatelessWidget { @override Widget build(BuildContext context) { return MaterialApp( title: 'Random Color App', ); } } Add the main() method before the RandomColorApp class code and after the import links: void main() => runApp(RandomColorApp());","title":"Step 3. Add a stateless widget"},{"location":"create_app/#step-4-add-a-stateful-widget","text":"Unlike a stateless widget, every stateful widget has a state. We will create a subclass of the StatefulWidget class and its state\u2014sublass of the State class. Type stful to add the StatefulWidget class structure from life templates . The following class structure will appear: class extends StatefulWidget { @override _State createState() => _State(); } class _State extends State<> { @override Widget build(BuildContext context) { return Container(); } } Rename the created classes. To do this, just type the name of the StatefulWidget sublass ( RandomColorHomePage ), all related classes will be renamed automatically. class RandomColorHomePage extends StatefulWidget { @override _RandomColorHomePageState createState() => _RandomColorHomePageState(); } class _RandomColorHomePageState extends State<RandomColorHomePage> { @override Widget build(BuildContext context) { return Container(); } } Add the created RandomColorHomePage class as a child widget for the RandomColorApp class created in Step 3: class RandomColorApp extends StatelessWidget { @override Widget build(BuildContext context) { return MaterialApp( title: 'Random Color App', home: RandomColorHomePage() ); } } Declare the _currentColor variable, which will contain a current color value, and override the setState() method in the _RandomColorHomePageState class. This method will generate a random color using external package random_color imported in Step 2. class _RandomColorHomePageState extends State<RandomColorHomePage> { Color _currentColor = RandomColor().randomColor(); @override void setState(fn) { _currentColor = RandomColor().randomColor(); super.setState(fn); } @override Widget build(BuildContext context) { return Container(); } } In the build() method of the _RandomColorHomePageState class, replace the default Container widget with the Scaffold widget containing AppBar , Text in the center of the screen and FloatingActionButton : class _RandomColorHomePageState extends State<RandomColorHomePage> { (\u2026) @override Widget build(BuildContext context) { return Scaffold( appBar: AppBar( title: Text('Random Color'), ), body: Center( child: Text('Current color'), ), floatingActionButton: FloatingActionButton( onPressed: null, tooltip: 'Change color', child: Icon(Icons.colorize), ), ); } } Run the application, or reload it if it is running. The app will look this way:","title":"Step 4. Add a stateful widget"},{"location":"create_app/#step-5-change-the-widgets-state","text":"On tapping the floating button, our app will change the color of its widgets and display the name of the current color in the center of the screen. To generate the current color value every time the button is tapped, add the call of the setState() method as a value of the onPressed property of FloatingActionButton : floatingActionButton: FloatingActionButton( onPressed: () { setState(() {}); }, Set the value of the backgroundColor property for the Scaffold , AppBar and FloatingActionButton widgets (for Scaffold , set the color value with transparency): @override Widget build(BuildContext context) { return Scaffold( backgroundColor: _currentColor.withAlpha(150), appBar: AppBar( title: Text('Random Color'), backgroundColor: _currentColor, ), body: Center( child: Text('Current color'), ), floatingActionButton: FloatingActionButton( onPressed: null, tooltip: 'Change color', child: Icon(Icons.colorize), backgroundColor: _currentColor, ), ); } Add the current color name under the \"Current color\" text. To do this, you will need to add a second Text widget and wrap both Text widgets with the Column widget. You can use Flutter Outline to wrap a widget with column automatically. To do this, select a widget in the Flutter Outline window and run the Wrap with Column command from toolbar or context menu. Additionally, format text size and color, and center the text vertically by using the mainAxisAlignment property of the Column widget: body: Center( child: Column( mainAxisAlignment: MainAxisAlignment.center, children: <Widget>[ Text(('Current color'), style: TextStyle( fontSize: 20, color: Color.fromARGB(255, 255, 255, 255), )), Text( (getColorNameFromColor(_currentColor).getName), style: TextStyle( fontSize: 36, color: Color.fromARGB(255, 255, 255, 255), ), ) ], ), ), Reload the application. You will get the following result: Your app interface will have a random color. The widgets color will change on tapping the floating button.","title":"Step 5. Change the widgets state"},{"location":"create_app/#source-code","text":"You can review the code of the created app here: main.dart pubspec.yaml","title":"Source code"},{"location":"create_app/#tips","text":"Use the Reformat Code with dartfmt command of the code editor context menu to correct the formatting of your code. Use the Dart Analysis window to review the errors which may appear when editing the code. Use Flutter Outline to easily navigate through the widgets tree, change widgets hierarchy, edit widgets layout, etc. Use Flutter Inspector to explore the widgets hierarchy and debug possible layout issues. Find more information on useful Flutter plugin functions in the Flutter Plugin Tools section.","title":"Tips"},{"location":"dart_analysis/","text":"Dart Analysis The Dart Analysys window shows the results of analysing the Dart code: It displays errors, warnings and hints, and allows to jump to the source code causing an issue. Navigate to source To navigate to the issue causing code fragment, double-click a message right-click a message and select Jump to Source click Autoscroll to Source , after that the code will be scrolled to the target fragment on clicking a message in the list Sort messages The messages can be sorted by their description or location. To do this, click the Description or Location column header. At the same time, you can group the messages by their severity type (error, warning or hints). To do this, click Group by Severity . Filter messages To set up the filter, click Filter . You can filter the messages by: their severity type (error, warning or hints) the files where they have been detected (whole project, current content root, current Dart package, current directory, current file)","title":"Dart Analysis"},{"location":"dart_analysis/#dart-analysis","text":"The Dart Analysys window shows the results of analysing the Dart code: It displays errors, warnings and hints, and allows to jump to the source code causing an issue.","title":"Dart Analysis"},{"location":"dart_analysis/#navigate-to-source","text":"To navigate to the issue causing code fragment, double-click a message right-click a message and select Jump to Source click Autoscroll to Source , after that the code will be scrolled to the target fragment on clicking a message in the list","title":"Navigate to source"},{"location":"dart_analysis/#sort-messages","text":"The messages can be sorted by their description or location. To do this, click the Description or Location column header. At the same time, you can group the messages by their severity type (error, warning or hints). To do this, click Group by Severity .","title":"Sort  messages"},{"location":"dart_analysis/#filter-messages","text":"To set up the filter, click Filter . You can filter the messages by: their severity type (error, warning or hints) the files where they have been detected (whole project, current content root, current Dart package, current directory, current file)","title":"Filter messages"},{"location":"flutter_doctor/","text":"Flutter Doctor This function checks if all components required for the proper operation of the Flutter SDK are installed and set up correctly. To run Flutter Doctor, select Tools > Flutter > Flutter Doctor in the main menu. Review the summary in the Messages window, to learn the current status of the Flutter installation, to be aware of possible issues and find out missing components or settings.","title":"Flutter Doctor"},{"location":"flutter_doctor/#flutter-doctor","text":"This function checks if all components required for the proper operation of the Flutter SDK are installed and set up correctly. To run Flutter Doctor, select Tools > Flutter > Flutter Doctor in the main menu. Review the summary in the Messages window, to learn the current status of the Flutter installation, to be aware of possible issues and find out missing components or settings.","title":"Flutter Doctor"},{"location":"flutter_inspector/","text":"Flutter Inspector This tool helps to explore the widgets layout and properties and debug layout and performance issues. Explore widgets layout and properties With Flutter Inspector , you can navigate through the widgets selecting them in the tree or on the device screen. To enable interaction between the widget tree and your mobile device (or emulator), click in the Flutter Inspector toolbar: To enable selecting widgets from the device, click on the device screen. For every selected widget, Flutter Inspector displays the list of available properties. When a widget or a property is selected in Flutter Inspector , its code is highlighted in the code editor. You can also go to the source code of the selected widget/property by using the following commands of context menu: Jump to Source . Go to the widget/property source code in your application. Jump to Type . Go to the source code of the widget/property type in the library. Debug layout and performance issues For debugging widget layout issues, you can use the Render Tree tab of Flutter Inspector . This view displays more detailed information on how widgets are rendered: Switch on the Debug Paint mode by clicking . In this mode, auxiliary lines and borders will appear on the device screen, which will help to better understand how the widgets are laid out: To examine the application performance, you can use the Performance tab of Flutter Inspector : Please visit the official Flutter website to get more information on debugging and performance analysis of Flutter applications.","title":"Flutter Inspector"},{"location":"flutter_inspector/#flutter-inspector","text":"This tool helps to explore the widgets layout and properties and debug layout and performance issues.","title":"Flutter Inspector"},{"location":"flutter_inspector/#explore-widgets-layout-and-properties","text":"With Flutter Inspector , you can navigate through the widgets selecting them in the tree or on the device screen. To enable interaction between the widget tree and your mobile device (or emulator), click in the Flutter Inspector toolbar: To enable selecting widgets from the device, click on the device screen. For every selected widget, Flutter Inspector displays the list of available properties. When a widget or a property is selected in Flutter Inspector , its code is highlighted in the code editor. You can also go to the source code of the selected widget/property by using the following commands of context menu: Jump to Source . Go to the widget/property source code in your application. Jump to Type . Go to the source code of the widget/property type in the library.","title":"Explore widgets layout and properties"},{"location":"flutter_inspector/#debug-layout-and-performance-issues","text":"For debugging widget layout issues, you can use the Render Tree tab of Flutter Inspector . This view displays more detailed information on how widgets are rendered: Switch on the Debug Paint mode by clicking . In this mode, auxiliary lines and borders will appear on the device screen, which will help to better understand how the widgets are laid out: To examine the application performance, you can use the Performance tab of Flutter Inspector : Please visit the official Flutter website to get more information on debugging and performance analysis of Flutter applications.","title":"Debug layout and performance issues"},{"location":"flutter_outline/","text":"Flutter Outline Flutter Outline represents the code structure of an open .dart file as a tree of widgets. You can navigate through your code by selecting widgets in the tree: This tool allows to change widgets layout and extract widgets constructors into separate methods. Changing widgets layout Flutter Outline allows adding different code structures for changing widgets layout. The following commands are available from the Flutter Outline toolbar and context menu: Center widget . Add the Center widget as a parent element for a selected widget. A child widget will be centered within a parent one. Add padding . Add the Padding widget as a parent element for a selected widget. Change padding of a child widget by setting the value of the padding property. Wrap with column . Add the Column widget as a parent element for a selected widget. You can add several widgets within a Column , and they will be arranged vertically. Wrap with row . Add the Row widget as a parent element for a selected widget. You can add several widgets within a Row , and they will be arranged horizontally. Wrap with Container . Add the Container widget as a parent element for a selected widget. You can add several widgets within a Container and adjust their position. Example In this example, we center the Text widget, wrap it into a column, add one more child element to the column and change padding for this element: Before: appBar: AppBar( title: Text('App name'), ), After: appBar: AppBar( title: Center(child: Column( children: <Widget>[ Text('App name'), Padding( padding: const EdgeInsets.all(5.0), child: Text('test'), ), ], )), ), Extracting methods You can extract the code of a selected widget into a separate method. To do this, Select a widget in the tree and click , or right-click the widget and select Extract method . In the opened window, change the name of the method if needed. Click Refactor . Example Before: floatingActionButton: FloatingActionButton( tooltip: 'Add', child: Icon(Icons.add), ), After: floatingActionButton: buildFloatingActionButton(), (\u2026) FloatingActionButton buildFloatingActionButton() { return FloatingActionButton( tooltip: 'Add', child: Icon(Icons.add), ); }","title":"Flutter Outline"},{"location":"flutter_outline/#flutter-outline","text":"Flutter Outline represents the code structure of an open .dart file as a tree of widgets. You can navigate through your code by selecting widgets in the tree: This tool allows to change widgets layout and extract widgets constructors into separate methods.","title":"Flutter Outline"},{"location":"flutter_outline/#changing-widgets-layout","text":"Flutter Outline allows adding different code structures for changing widgets layout. The following commands are available from the Flutter Outline toolbar and context menu: Center widget . Add the Center widget as a parent element for a selected widget. A child widget will be centered within a parent one. Add padding . Add the Padding widget as a parent element for a selected widget. Change padding of a child widget by setting the value of the padding property. Wrap with column . Add the Column widget as a parent element for a selected widget. You can add several widgets within a Column , and they will be arranged vertically. Wrap with row . Add the Row widget as a parent element for a selected widget. You can add several widgets within a Row , and they will be arranged horizontally. Wrap with Container . Add the Container widget as a parent element for a selected widget. You can add several widgets within a Container and adjust their position.","title":"Changing widgets layout"},{"location":"flutter_outline/#example","text":"In this example, we center the Text widget, wrap it into a column, add one more child element to the column and change padding for this element: Before: appBar: AppBar( title: Text('App name'), ), After: appBar: AppBar( title: Center(child: Column( children: <Widget>[ Text('App name'), Padding( padding: const EdgeInsets.all(5.0), child: Text('test'), ), ], )), ),","title":"Example"},{"location":"flutter_outline/#extracting-methods","text":"You can extract the code of a selected widget into a separate method. To do this, Select a widget in the tree and click , or right-click the widget and select Extract method . In the opened window, change the name of the method if needed. Click Refactor .","title":"Extracting methods"},{"location":"flutter_outline/#example_1","text":"Before: floatingActionButton: FloatingActionButton( tooltip: 'Add', child: Icon(Icons.add), ), After: floatingActionButton: buildFloatingActionButton(), (\u2026) FloatingActionButton buildFloatingActionButton() { return FloatingActionButton( tooltip: 'Add', child: Icon(Icons.add), ); }","title":"Example"},{"location":"flutter_tools/","text":"Flutter Plugin Tools In this section, you will learn helpful tools and functions, which allow to ease and speed up work with the Flutter SDK: Dart Analysis . View syntax errors and warnings. Flutter Doctor . Analyze possible and existing SDK installation issues. Flutter Inspector . Debug layout and performance issues. Flutter Outline . Navigate through the widgets and change their layout. Life Templates . Quickly type common Flutter code structures.","title":"Overview"},{"location":"flutter_tools/#flutter-plugin-tools","text":"In this section, you will learn helpful tools and functions, which allow to ease and speed up work with the Flutter SDK: Dart Analysis . View syntax errors and warnings. Flutter Doctor . Analyze possible and existing SDK installation issues. Flutter Inspector . Debug layout and performance issues. Flutter Outline . Navigate through the widgets and change their layout. Life Templates . Quickly type common Flutter code structures.","title":"Flutter Plugin Tools"},{"location":"hot_reload/","text":"Hot Reload With this function, you can reload the code of your running application without restarting it and losing its current state. To use hot reload, While your app is running , make some changes in your code. Save these changes with the Save All command or click the Hot Reload button in the IntelliJ IDEA toolbar. You can disable performing hot reload on save in Flutter settings ( File > Settings > Languages&Frameworks > Flutter in Windows or IntelliJ IDEA > Preferences > Languages&Frameworks > Flutter in macOS). To do this, deselect the Perform hot reload on save checkbox. Example Run the standard demo app (the code added by default in lib/main.dart when creating a new Flutter project). Click the floating button to change the number displayed on the screen: Change the color of the demo app by replacing this code theme: ThemeData( primarySwatch: Colors.blue, ), with this one: theme: ThemeData( primarySwatch: Colors.green, ), Save the changes or click Hot Reload . You will see that the application color has changed, whereas the number on the screen remains the same:","title":"Hot Reload"},{"location":"hot_reload/#hot-reload","text":"With this function, you can reload the code of your running application without restarting it and losing its current state. To use hot reload, While your app is running , make some changes in your code. Save these changes with the Save All command or click the Hot Reload button in the IntelliJ IDEA toolbar. You can disable performing hot reload on save in Flutter settings ( File > Settings > Languages&Frameworks > Flutter in Windows or IntelliJ IDEA > Preferences > Languages&Frameworks > Flutter in macOS). To do this, deselect the Perform hot reload on save checkbox.","title":"Hot Reload"},{"location":"hot_reload/#example","text":"Run the standard demo app (the code added by default in lib/main.dart when creating a new Flutter project). Click the floating button to change the number displayed on the screen: Change the color of the demo app by replacing this code theme: ThemeData( primarySwatch: Colors.blue, ), with this one: theme: ThemeData( primarySwatch: Colors.green, ), Save the changes or click Hot Reload . You will see that the application color has changed, whereas the number on the screen remains the same:","title":"Example"},{"location":"install/","text":"Install the Flutter and Dart Plugins To install the plugins, Run IntelliJ IDEA. In the welcome window, click Configure > Plugins . Alternatively, select File > Settings > Plugins on Windows or IntelliJ IDEA > Preferences > Plugins on macOS from the IDE main window. Click Browse Repositories and type \"Flutter\" in the search field. Find the Flutter plugin and click Install : During the Flutter plugin installation you'll receive a message saying that the Dart plugin has to be installed as well. Click Proceed to install both plugins. Restart the IDE after the installation is finished. You can use Flutter Doctor to check if all components required for Flutter apps development are installed on your computer.","title":"Install the Flutter and Dart Plugins"},{"location":"install/#install-the-flutter-and-dart-plugins","text":"To install the plugins, Run IntelliJ IDEA. In the welcome window, click Configure > Plugins . Alternatively, select File > Settings > Plugins on Windows or IntelliJ IDEA > Preferences > Plugins on macOS from the IDE main window. Click Browse Repositories and type \"Flutter\" in the search field. Find the Flutter plugin and click Install : During the Flutter plugin installation you'll receive a message saying that the Dart plugin has to be installed as well. Click Proceed to install both plugins. Restart the IDE after the installation is finished. You can use Flutter Doctor to check if all components required for Flutter apps development are installed on your computer.","title":"Install the Flutter and Dart Plugins"},{"location":"life_templates/","text":"Life Templates You can speed up code writing by using special Flutter life templates, which allow creating standard code structures by typing special prefixes: stless . Create a subclass of StatelessWidget . stful . Create a subclass of StatefulWidget and its associated State subclass. stanim . Create a new subclass of StatefulWidget and it\u2019s associated State subclass including a field initialized with AnimationController .","title":"Life Templates"},{"location":"life_templates/#life-templates","text":"You can speed up code writing by using special Flutter life templates, which allow creating standard code structures by typing special prefixes: stless . Create a subclass of StatelessWidget . stful . Create a subclass of StatefulWidget and its associated State subclass. stanim . Create a new subclass of StatefulWidget and it\u2019s associated State subclass including a field initialized with AnimationController .","title":"Life Templates"},{"location":"run_app/","text":"Run a Flutter Application To run a created application, Select an Android device from the list of target devices in IntelliJ IDEA toolbar. You may use a physical device connected to your computer as well as a virtual one. If there are no virtual devices available, go to Tools > Android > AVD Manager and add a virtual device . Select a module which will be running (a .dart file containing the main() method), by default it is lib/main.dart . Click the Run button. Running an application may take a while, but you do not need to run it every time you change your code. To reload the changed code, use the hot reload function.","title":"Run a Flutter Application"},{"location":"run_app/#run-a-flutter-application","text":"To run a created application, Select an Android device from the list of target devices in IntelliJ IDEA toolbar. You may use a physical device connected to your computer as well as a virtual one. If there are no virtual devices available, go to Tools > Android > AVD Manager and add a virtual device . Select a module which will be running (a .dart file containing the main() method), by default it is lib/main.dart . Click the Run button. Running an application may take a while, but you do not need to run it every time you change your code. To reload the changed code, use the hot reload function.","title":"Run a Flutter Application"}]}